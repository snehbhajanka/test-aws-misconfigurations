AWSTemplateFormatVersion: "2010-09-09"
Description: "Secure S3 bucket configuration that blocks public access - SECURITY FIXED"

Parameters:
  BucketName:
    Type: String
    Description: "Name for the S3 bucket (will have random suffix added)"
    Default: "my-secure-bucket"
    AllowedPattern: "^[a-z0-9][a-z0-9-]*$"
    ConstraintDescription: "Bucket name must start with lowercase letter or number and contain only lowercase letters, numbers, and hyphens"

Resources:
  # Generate a random suffix for the bucket name
  BucketSuffix:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt RandomStringFunction.Arn

  # Lambda function to generate random string
  RandomStringFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-random-string"
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          import random
          import string
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                      
                  random_string = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {'RandomString': random_string})
              except Exception as e:
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  # IAM role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # Access logs bucket
  AccessLogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketName}-access-logs-${BucketSuffix.RandomString}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: "AccessLogsBucket"
        - Key: Environment
          Value: "SecurityTesting"
        - Key: Purpose
          Value: "Store S3 access logs"

  # SECURITY FIXED: Secure S3 Bucket
  SecureS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketName}-${BucketSuffix.RandomString}"
      # SECURITY FIX: Block all public access
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      # SECURITY FIX: Enable server-side encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      # SECURITY FIX: Enable versioning
      VersioningConfiguration:
        Status: Enabled
      # SECURITY FIX: Enable access logging
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: "access-logs/"
      # SECURITY FIX: Enable lifecycle management
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 90
                StorageClass: GLACIER
      # SECURITY FIX: Enable notification for security events
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: "s3:ObjectCreated:*"
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      Tags:
        - Key: Name
          Value: "SecureS3Bucket"
        - Key: Environment
          Value: "SecurityTesting"
        - Key: Purpose
          Value: "Secure bucket with all security controls enabled"
        - Key: SecurityStatus
          Value: "FIXED"

  # SECURITY FIX: Secure bucket policy (deny insecure connections)
  SecureBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SecureS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub "${SecureS3Bucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # CloudWatch Log Group for S3 events
  S3LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/s3/${BucketName}-${BucketSuffix.RandomString}"
      RetentionInDays: 14

Outputs:
  SecureBucketName:
    Description: "Name of the secure S3 bucket"
    Value: !Ref SecureS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-SecureBucketName"

  SecureBucketArn:
    Description: "ARN of the secure S3 bucket"
    Value: !GetAtt SecureS3Bucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SecureBucketArn"

  AccessLogsBucketName:
    Description: "Name of the access logs bucket"
    Value: !Ref AccessLogsBucket
    Export:
      Name: !Sub "${AWS::StackName}-AccessLogsBucketName"

  SecurityStatus:
    Description: "Security status of the bucket"
    Value: "âœ… SECURITY FIXED: This bucket blocks public access, has encryption enabled, versioning enabled, and access logging configured!"

  ValidationSteps:
    Description: "Steps to validate the security configuration"
    Value: "1. Run 'aws s3api get-public-access-block --bucket <bucket-name>' to verify all settings are true. 2. Try accessing bucket contents from unauthenticated user to confirm access is denied. 3. Check encryption and versioning are enabled in AWS Console."