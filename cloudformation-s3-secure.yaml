AWSTemplateFormatVersion: "2010-09-09"
Description: "Secure S3 Bucket Configuration - PRODUCTION READY. Implements remediation for S3.3 security misconfiguration to prevent public write access."

Parameters:
  BucketPrefix:
    Type: String
    Default: "my-secure-bucket"
    Description: "Prefix for the S3 bucket name"
    
  Environment:
    Type: String
    Default: "Production"
    AllowedValues:
      - "Production"
      - "Staging"
      - "Development"
    Description: "Environment for the S3 bucket"

Resources:
  # Secure S3 Bucket with proper access controls
  SecureS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${BucketPrefix}-${AWS::AccountId}-${AWS::Region}"
      
      # SECURITY FIX 1: Enable Block Public Access Settings (S3.3 Remediation)
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      
      # SECURITY FIX 2: Enable server-side encryption
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
            BucketKeyEnabled: true
      
      # SECURITY FIX 3: Enable versioning
      VersioningConfiguration:
        Status: Enabled
      
      # SECURITY FIX 4: Enable access logging
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: "access-logs/"
      
      # SECURITY ENHANCEMENT: Add lifecycle policy to manage costs
      LifecycleConfiguration:
        Rules:
          - Id: "LifecycleRule"
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
              - TransitionInDays: 60
                StorageClass: GLACIER
            ExpirationInDays: 365
            NoncurrentVersionExpirationInDays: 90
      
      # SECURITY ENHANCEMENT: Enable notification for unauthorized access attempts
      NotificationConfiguration:
        CloudWatchConfigurations:
          - Event: "s3:ObjectCreated:*"
            CloudWatchConfiguration:
              LogGroupName: !Ref S3LogGroup
      
      Tags:
        - Key: "Name"
          Value: "SecureBucket"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "Properly configured secure S3 bucket"
        - Key: "Security"
          Value: "BlockPublicAccess"
        - Key: "Compliance"
          Value: "S3.3-Compliant"

  # Separate bucket for storing access logs
  AccessLogsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "access-logs-${AWS::AccountId}-${AWS::Region}"
      
      # Block public access for logs bucket too
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      
      # Encrypt access logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      
      # Lifecycle policy for access logs
      LifecycleConfiguration:
        Rules:
          - Id: "AccessLogsLifecycle"
            Status: Enabled
            ExpirationInDays: 90
      
      Tags:
        - Key: "Name"
          Value: "AccessLogsBucket"
        - Key: "Environment"
          Value: !Ref Environment
        - Key: "Purpose"
          Value: "Store S3 access logs"

  # SECURITY FIX 5: Secure bucket policy (no public access)
  SecureBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref SecureS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "AllowAuthenticatedAccess"
            Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:ListBucket"
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub "${SecureS3Bucket.Arn}/*"
          - Sid: "DenyInsecureConnections"
            Effect: "Deny"
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt SecureS3Bucket.Arn
              - !Sub "${SecureS3Bucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # CloudWatch Log Group for S3 access monitoring
  S3LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/aws/s3/${SecureS3Bucket}"
      RetentionInDays: 30

  # IAM Role for CloudTrail (optional - for comprehensive monitoring)
  CloudTrailRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CloudTrailS3Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetBucketAcl"
                Resource:
                  - !Sub "${AccessLogsBucket}/*"
                  - !GetAtt AccessLogsBucket.Arn

Outputs:
  SecureBucketName:
    Description: "Name of the secure S3 bucket"
    Value: !Ref SecureS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-SecureBucketName"

  SecureBucketArn:
    Description: "ARN of the secure S3 bucket"
    Value: !GetAtt SecureS3Bucket.Arn
    Export:
      Name: !Sub "${AWS::StackName}-SecureBucketArn"

  SecureBucketDomainName:
    Description: "Domain name of the secure S3 bucket"
    Value: !GetAtt SecureS3Bucket.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-SecureBucketDomainName"

  PublicAccessBlockStatus:
    Description: "Block Public Access settings for the secure bucket"
    Value: "All Block Public Access settings are ENABLED (BlockPublicAcls=true, BlockPublicPolicy=true, IgnorePublicAcls=true, RestrictPublicBuckets=true)"
    Export:
      Name: !Sub "${AWS::StackName}-PublicAccessBlockStatus"

  SecurityCompliance:
    Description: "Security compliance status"
    Value: "âœ… This bucket is properly configured with Block Public Access settings enabled, preventing public write access (S3.3 compliance)"
    Export:
      Name: !Sub "${AWS::StackName}-SecurityCompliance"

  ValidationCommands:
    Description: "AWS CLI commands to validate the secure configuration"
    Value: !Sub |
      # Verify Block Public Access Settings:
      aws s3api get-public-access-block --bucket ${SecureS3Bucket}
      
      # Verify bucket policy does not allow public access:
      aws s3api get-bucket-policy --bucket ${SecureS3Bucket}
      
      # Verify bucket ACL is private:
      aws s3api get-bucket-acl --bucket ${SecureS3Bucket}